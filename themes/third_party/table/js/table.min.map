{"version":3,"file":"table.min.js","sources":["../../../../../third_party/table/js/table.js"],"names":["$","document","ready","closest","num","arr","counter","each","Math","abs","this","position","addRowDragger","row_num","append","cell_height","addColDragger","col_num","cell_width","addTransitionsClass","addClass","updateTableCells","field_id","getTable","data","tabindex","row","num_rows","col","num_cols","current_cell_first_child","attr","getTableLeftBar","getTableCells","getTableCol","getTableRow","getTableRowDragger","undefined","getTableColDragger","getTableRowDeleteLink","updateTableRow","move_index","new_row_num","current_row","current_drag_row","current_row_delete_link","row_position","row_positions","css","updateRowPositionsCache","i","push","the_table","col_positions","dragging","drag_row","drag_col","last_drag_x","last_drag_y","x","y","height","setTimeout","on","e","preventDefault","new_row_position","width","new_col_num","new_col_position","the_table_row","the_table_row_dragger","the_table_row_delete_link","confirm","remove","removeClass","stopPropagation","drag_element","fadeOut","not","pageY","offset","top","drag_link","closest_row","new_row_index","should_move_row","should_move_row_to_y","should_move_row_down","should_move_row_down_to_y","pageX","left","drag_col_link","closest_col","new_col_index","should_move_over_col_to_x","should_move_over_col_right_to","fadeIn","row_y","row_counter","show","row_x","col_counter"],"mappings":"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","sourcesContent":["$(document).ready(function(e) {\n\n    /**\n     * Find the closest number in an array to the number provided\n     *\n     * @param num number to find closest to\n     * @param arr array of numbers\n     * @return object with \"position\" (array index) and \"closest\" (number) (ie. position: 1, closest: 100)\n     */\n    $.closest = function(num, arr) {\n        var closest = null;\n        var counter = -1;\n\n        $.each(arr, function() {\n            if (closest === null || Math.abs(this - num) < Math.abs(closest - num)) {\n                closest = this;\n                counter++;\n            }\n        });\n\n        return {position: counter, closest: closest};\n    };\n\n    /**\n     * Add a row reoder \"flip\" to the table\n     * @param row\n     */\n    $.addRowDragger = function(row_num) {\n        $('.table__table').append('<div class=\"drag-row icon-reorder\" style=\"top:'+((row_num-1) * cell_height)+'px\" data-row=\"'+row_num+'\"></div>');\n        $('.table__table').append('<div class=\"table__table__delete-row icon-remove-circle\" style=\"top: '+((row_num*cell_height)-(cell_height/2)-5)+'px\" data-row=\"'+row_num+'\"></div>');\n    };\n\n    /**\n     * Add a column reoder \"flip\" to the table\n     * @param col_num\n     */\n    $.addColDragger = function(col_num) {\n        $('.table__table').append('<div class=\"drag-col icon-reorder\" style=\"left:'+((col_num*cell_width)-19)+'px\" data-col=\"'+col_num+'\"></div>');\n    };\n\n\n    /**\n     * Add 'transitions' class to elements that should have it after init\n     */\n    $.addTransitionsClass = function() {\n        $('.table__table .table__cell').addClass('transitions');\n    };\n\n    /**\n     * Update all table cells w/correct tabindex etc. - this is needed after\n     * dragging around rows/cols and adding/removing rows/cols\n     */\n    $.updateTableCells = function() {\n\n        var field_id = $.getTable().data('field_id');\n\n        /**\n         * Update table cell tabs indexes\n         */\n        var tabindex = 0;\n        for(var row=1; row < (num_rows+1); row++) {\n            for(var col=1; col < (num_cols+1); col++) {\n                tabindex++;\n                var current_cell_first_child =  $('.table__table .table__cell[data-row=\"'+row+'\"][data-col=\"'+col+'\"] :first-child');\n\n                // set tabindex\n                current_cell_first_child.attr('tabindex', tabindex);\n                current_cell_first_child.attr('name', 'table_cell_'+field_id+'['+row+']['+col+']');\n            }\n        }\n    };\n\n    /**\n     * Get the table\n     *\n     * @returns {*|jQuery|HTMLElement}\n     */\n    $.getTable = function() {\n        return $('.table__table');\n    };\n\n    $.getTableLeftBar = function() {\n        return $('.table__table__left__bar');\n    };\n\n    /**\n     * Get all table cells\n     *\n     * @returns {*|jQuery|HTMLElement}\n     */\n    $.getTableCells = function() {\n       return $('.table__table .table__cell');\n    };\n\n    /**\n     * Get column by column number\n     *\n     * @param col_num\n     */\n    $.getTableCol = function(col_num) {\n        return $('.table__table .table__cell[data-col='+col_num+']');\n    };\n\n    /**\n     * Get row by row number\n     *\n     * @param row_num\n     */\n    $.getTableRow = function(row_num) {\n       return $('.table__table .table__cell[data-row=\"'+(row_num)+'\"]');\n    };\n\n    /**\n     * Get a specific row dragger by row number, or all row draggers if row_num not specified\n     *\n     * @param row_num (can be empty)\n     */\n    $.getTableRowDragger = function(row_num) {\n        if(row_num !== undefined) {\n            return $('.drag-row[data-row=\"'+row_num+'\"]');\n        } else {\n            return $('.drag-row');\n        }\n    };\n\n    /**\n     * Get col dragger by column number, or all column draggers if col_num not specified\n     *\n     * @param col_num (can be empty)\n     */\n    $.getTableColDragger = function(col_num) {\n        if(col_num !== undefined) {\n            return $('.drag-col[data-col=\"'+col_num+'\"]');\n        } else {\n            return $('.drag-col');\n        }\n    };\n\n\n    /**\n     * Get row delete link by row number\n     *\n     * @param row_num\n     */\n    $.getTableRowDeleteLink = function(row_num) {\n        if(row_num !== undefined) {\n            return $('.table__table__delete-row[data-row=\"'+row_num+'\"]');\n        } else {\n            return $('.table__table__delete-row');\n        }\n    };\n\n\n    /**\n     * Will update a table row and it's action icons to the correct postion\n     * @param row_num\n     */\n    $.updateTableRow = function(row_num, move_index) {\n\n        var new_row_num = row_num;\n        var current_row = $.getTableRow(row_num);\n        var current_drag_row = $.getTableRowDragger(row_num);\n        var current_row_delete_link = $.getTableRowDeleteLink(row_num);\n\n        if(move_index !== undefined) {\n            new_row_num = row_num + move_index;\n            current_row.data('row', new_row_num);\n            current_row.attr('data-row', new_row_num);\n            current_drag_row.data('row', new_row_num);\n            current_drag_row.attr('data-row', new_row_num);\n            current_row_delete_link.data('row', new_row_num);\n            current_row_delete_link.attr('data-row', new_row_num);\n        }\n\n        var row_position = row_positions[new_row_num-1];\n        current_drag_row.css('top', row_position + 'px' );\n        current_row.css('top', row_position + 'px' );\n\n        current_row_delete_link.css('top', (row_position + (cell_height/2)-5) + 'px');\n    };\n\n\n    /**\n     * Update row positions array\n     */\n    $.updateRowPositionsCache = function() {\n        row_positions = [];\n        for(var i=0; i < num_rows; i++) {\n            var row_position = i*cell_height;\n            row_positions.push( row_position );\n        }\n    };\n\n\n\n\n    var the_table = $.getTable();\n\n    var cell_width = 200;\n    var cell_height = 100;\n    var num_cols = the_table.data('init-num-cols');\n    var num_rows = the_table.data('init-num-rows');\n    var row_positions = [0];\n    var col_positions = [];\n\n    var dragging = false;       // is currently dragging? true/false\n    var drag_row = false;       // row number being dragged\n    var drag_col = false;       // col number being dragged\n    var last_drag_x = false;    // last X position used for row when dragging\n    var last_drag_y = false;    // last Y position used for col when dragging\n\n\n\n\n\n\n    /**\n     * Initiate the table. Will move cells around to their correct\n     * initial positions.\n     *\n     */\n\n    var x = 0;\n    var y = 0;\n\n    $.addRowDragger(1); // add for 1st\n\n    $.getTableCells().each(function(e) {\n        if(x >= num_cols) {\n            x = 0;\n            y++;\n\n            $.addRowDragger(y+1);\n\n            row_positions.push(y*cell_height);\n        }\n        $(this).css('left', x*cell_width);\n        $(this).css('top', y*cell_height);\n\n        if(y === 0) {\n            col_positions.push(x*cell_width);            // as long as we are on first row, store col positions\n            $.addColDragger(x+1);\n        }\n\n        x++;\n    });\n\n    $.getTableLeftBar().css('height', ($.getTable().height() + 20) + 'px' );\n\n\n\n    // add transitions class after we have positioned them\n    setTimeout($.addTransitionsClass, 500);\n\n\n    /**\n     * Add row button click handler\n     */\n    $('.table__table__add-row').on('click', function(e) {\n        e.preventDefault();\n\n        var the_table = $.getTable();\n        var field_id = the_table.data('field_id');\n\n        the_table.css('height', $('.table__table').height() + cell_height);\n        var new_row_num = num_rows+1;\n        var new_row_position = (num_rows*cell_height);\n\n        $.addRowDragger(new_row_num);\n\n        for(var i=0; i < num_cols; i++ ) {\n            the_table.append(\n                '<div style=\"top:'+new_row_position+'px; left:'+(i*cell_width)+'px\" class=\"table__cell transitions\" data-row=\"'+new_row_num+'\" data-col=\"'+(i+1)+'\"><textarea></textarea></div>'\n            );\n        }\n\n        row_positions.push(new_row_position);\n        num_rows++;\n\n        $.getTableLeftBar().css('height', (the_table.height() + 20) + 'px' );\n\n        $.updateTableCells();\n    });\n\n    /**\n     * Add col button click handler\n     */\n    $('.table__table__add-col').on('click', function(e) {\n        e.preventDefault();\n\n        var the_table = $.getTable();\n        the_table.css('width', $('.table__table').width() + cell_width);\n        var new_col_num = num_cols+1;\n        var new_col_position = (num_cols*cell_width);\n\n        $.addColDragger(new_col_num);\n        for(var i=0; i < num_rows; i++) {\n            the_table.append(\n                '<div style=\"top:'+(i*cell_height)+'px; left:'+new_col_position+'px\" class=\"table__cell transitions\" data-row=\"'+(i+1)+'\" data-col=\"'+new_col_num+'\"><textarea></textarea></div>'\n            );\n        }\n\n        col_positions.push(new_col_position);\n        num_cols++;\n\n        $.updateTableCells();\n    });\n\n\n    /**\n     * Delete row button click handler\n     */\n    $(document).on('click','.table__table__delete-row', function(e) {\n        var row = $(this).data('row');\n        var the_table_row = $.getTableRow(row);\n        var the_table_row_dragger = $.getTableRowDragger(row);\n        var the_table_row_delete_link = $.getTableRowDeleteLink(row);\n        var the_table = $.getTable();\n\n        the_table_row.addClass('table__cell-pending-delete');\n        if(confirm('Sure you want to delete the row?')) {\n\n            // remove the\n            the_table_row.remove();\n            the_table_row_dragger.remove();\n            the_table_row_delete_link.remove();\n\n            num_rows--;\n            the_table.css('height', cell_height*num_rows);\n            $.updateRowPositionsCache();\n\n            // move all rows below the deleted row one up\n            for(var i=row; i <= num_rows; i++) {\n                $.updateTableRow(i+1, -1);\n            }\n\n            $.getTableLeftBar().css('height', (the_table.height() + 20) + 'px' );\n\n            $.updateTableCells();\n\n        } else {\n            the_table_row.removeClass('table__cell-pending-delete');\n        }\n    });\n\n\n    /**\n     * drag-row mouse handler\n     */\n    $(document).on('mousedown', '.drag-row', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        $(this).addClass('active__dragging__link');\n        var row = $(this).data('row');\n        var drag_element = $.getTableRow(row);\n        drag_element.removeClass('transitions').addClass('table__dragging__element');\n\n        $.getTableRowDeleteLink().fadeOut();\n\n        $('.drag-row').not('.active__dragging__link').fadeOut();\n\n        dragging = true;\n        drag_row = row;\n        drag_col = false;\n        return false;\n    });\n\n\n    /**\n     * drag-col mouse handler\n     */\n    $(document).on('mousedown', '.drag-col', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        $(this).addClass('active__dragging__link');\n\n        var col = $(this).data('col');\n\n\n        $.getTableCol(col).removeClass('transitions').addClass('table__dragging__element');\n\n        $('.drag-col').not('.active__dragging__link').fadeOut();\n\n        dragging = true;\n        drag_col = col;\n        drag_row = false;\n\n        return false;\n    });\n\n    $(document).on('mousemove', function(e) {\n        e.preventDefault();\n\n        if(dragging) {\n\n            var the_table = $.getTable();\n\n            if(drag_row) {\n                last_drag_y = e.pageY - the_table.offset().top;\n\n                var drag_link = $('.drag-row.active__dragging__link');\n\n                /**\n                 * Move the row being dragged\n                 */\n                drag_link.css('top', last_drag_y+'px');\n                drag_link.css('left', '-20px');\n                drag_link.css('position', 'absolute');\n\n                $('.table__dragging__element').each(function(e) {\n                    $(this).css('top', last_drag_y + 'px');\n                });\n\n                var closest_row = $.closest(last_drag_y, row_positions);\n                var new_row_index = closest_row.position+1;\n\n                /**\n                 * We are moving down, so move the one beneath up\n                 */\n                if((closest_row.position+1) > drag_row) {\n\n                    var should_move_row = closest_row.position+1;\n                    var should_move_row_to_y = closest_row.closest - cell_height;\n\n                    $.getTableRow(should_move_row).each(function(e) {\n                        $(this).css('top', (should_move_row_to_y) + 'px');\n                        $(this).attr('data-row', should_move_row-1);\n                        $(this).data('row', should_move_row-1);\n                    });\n\n                    /**\n                     * Update row information for the row we are currently dragging\n                     */\n                     $('.table__dragging__element').each(function(e) {\n                        $(this).attr('data-row', new_row_index+1);\n                        $(this).data('row', new_row_index+1);\n                    });\n\n                    drag_row = new_row_index+1;\n\n\n                } else if((closest_row.position+1) < drag_row) {\n\n                    var should_move_row_down = closest_row.position+1;\n                    var should_move_row_down_to_y = should_move_row_down*cell_height;\n\n                    $.getTableRow(should_move_row_down).each(function(e) {\n                        $(this).css('top', (should_move_row_down_to_y) + 'px');\n                        $(this).attr('data-row', should_move_row_down+1);\n                        $(this).data('row', should_move_row_down+1);\n                    });\n\n                    /**\n                     * Update row information for the row being dragged\n                     */\n\n                    $('.table__dragging__element').each(function(e) {\n                        $(this).attr('data-row', new_row_index);\n                        $(this).data('row', new_row_index);\n                    });\n\n                    drag_row = new_row_index;\n                }\n\n            } else if(drag_col) {\n\n                last_drag_x = e.pageX - the_table.offset().left - cell_width;\n\n                var drag_col_link = $('.drag-col.active__dragging__link');\n\n                /**\n                 * Move the row being dragged\n                 */\n                drag_col_link.css('top', '-20px');\n                drag_col_link.css('left', (last_drag_x+cell_width-19)+'px');\n                drag_col_link.css('position', 'absolute');\n\n                /**\n                 * Move the column being dragged\n                 */\n                $('.table__dragging__element').each(function(e) {\n                    $(this).css('left', last_drag_x + 'px');\n                });\n\n                var closest_col = $.closest(last_drag_x, col_positions);\n                var new_col_index = closest_col.position+1;\n\n                if(new_col_index > drag_col) {\n\n                    var should_move_over_col_to_x = (closest_col.position-1) * cell_width;\n\n                    /**\n                     * Move the col we are over left\n                     */\n                    $.getTableCol(new_col_index).each(function(e) {\n                        $(this).css('left', (should_move_over_col_to_x) + 'px');\n                        $(this).attr('data-col', new_col_index-1);\n                        $(this).data('col', new_col_index-1);\n                    });\n\n                    $('.table__dragging__element').each(function(e) {\n                        $(this).attr('data-col', new_col_index);\n                        $(this).data('col', new_col_index);\n                    });\n\n                    drag_col = new_col_index;\n\n\n                } else if(new_col_index < drag_col) {\n\n                    var should_move_over_col_right_to =  (closest_col.position+1) * cell_width;\n\n                    /**\n                     * Move the col we are over right\n                     */\n                    $.getTableCol(new_col_index).each(function(e) {\n                        $(this).css('left', (should_move_over_col_right_to) + 'px');\n                        $(this).attr('data-col', new_col_index+1);\n                        $(this).data('col', new_col_index+1);\n                    });\n\n                    $('.table__dragging__element').each(function(e) {\n                        $(this).attr('data-col', new_col_index);\n                        $(this).data('col', new_col_index);\n                    });\n\n                    drag_col = new_col_index;\n\n                }\n            }\n        }\n\n        return false;\n    });\n\n    $(document).on('mouseup', function(e) {\n        e.preventDefault();\n        dragging = false;\n\n        $('.active__dragging__link').removeClass('active__dragging__link');\n\n        if(drag_row) {  // we were dragging a row, so find the closest spot for it\n\n            $.getTableRowDeleteLink().fadeIn();\n\n            var closest_row = $.closest(last_drag_y, row_positions);\n            var row_y = closest_row.closest;\n            $('.table__dragging__element').css('top', row_y+'px');\n\n            /**\n             * Go through all drag rows and position them correctly + set data-row based on position in HTML\n             */\n            var row_counter = 1;\n            $.getTableRowDragger().each(function(e) {\n                $(this).css('top', ((row_counter-1) * cell_height) + 'px' );\n                $(this).attr('data-row', row_counter);\n                $(this).data('row', row_counter);\n                row_counter++;\n\n                $(this).show();\n            });\n\n\n        } else if(drag_col) {\n\n            var closest_col = $.closest(last_drag_x, col_positions);\n            var row_x = closest_col.closest;\n            $('.table__dragging__element').css('left', row_x+'px');\n\n            var col_counter = 1;\n            $.getTableColDragger().each(function(e) {\n                $(this).css('left', ((col_counter * cell_width)-19) + 'px' );\n                $(this).attr('data-col', col_counter);\n                $(this).data('col', col_counter);\n                col_counter++;\n\n                $(this).show();\n            });\n\n        }\n\n        $.getTableCells().removeClass('table__dragging__element').addClass('transitions');\n\n        $.updateTableCells();\n\n        drag_row = false;\n        drag_col = false;\n\n        return false;\n    });\n\n\n});"]}